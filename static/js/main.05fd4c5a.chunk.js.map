{"version":3,"sources":["components/GlobalParams.js","components/ConvictionVoting.js","components/TimeLine.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Me","props","p","qs","parse","location","search","ignoreQueryPrefix","history","state","globalparams","onChange","this","slider","desc","paramName","unit","min","max","step","start","amp","setVal","newVal","newState","Object","assign","setState","searchString","stringify","console","log","push","pathname","process","currentVal","className","value","type","e","target","Component","proposal","currenttime","timeline","undefined","plot","recalc","restart","newProps","paramsToNumbers","keys","reduce","accum","key","parseFloat","i","g","b","convictiontresholdpassed","interval","setInterval","newTime","tl","clearInterval","t","h","L","D0","D2","RWD","simstep","labels","Math","floor","spool1_beltlength","spool1_rotations","spool1_outer_diameter","spool2_beltlength","spool2_rotations","spool2_outer_diameter","distance_traveled","ratio","time_elapsed","pathArray","initial_L_spool2","initial_N_spool2","sqrt","PI","winning_time","winning_distance","L_spool1","N_spool1","L_spool2","N_spool2","distance_traveled_now","time_elapsed_now","rpm","diameter_spool1","diameter_spool2","makerjs","paths","Circle","origin","radius","offsetX","Lt","colorindex","plots","datasets","label","fill","borderColor","makecolor","data","svg","exporter","toSVG","map","dangerouslySetInnerHTML","__html","onClick","rootPath","App","path","exact","render","GlobalParams","ConvictionVoting","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.05fd4c5a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./sim.css\";\nimport qs from 'query-string';\n\nclass Me extends Component {\n    constructor(props) {\n        super();\n\n        const p = qs.parse(props.location.search, { ignoreQueryPrefix: true });\n\n        // debugger;\n\n        this.history = props.history;\n\n        this.state = {\n            globalparams: p || {},\n            history: props.history\n        };\n\n        this.onChange = props.onChange;\n\n    }\n\n    componentWillMount() {\n        debugger;\n        if (this.onChange) {\n            this.onChange(this.state.globalparams);\n        }\n    }\n\n    render() {\n\n        const slider = (desc, paramName, unit, min, max, step, start) => {\n            const amp = 1 / step;\n            const setVal = (newVal) => {\n                // console.log(`setval ${paramName}=${newVal} (old val=${this.state.globalparams[paramName]})`);\n                if (this.state.globalparams[paramName] === newVal) {\n                    return newVal;\n                }\n                let newState = Object.assign(\n                    {},\n                    this.state.globalparams\n                );\n                newState[paramName] = newVal / amp;\n                this.setState({ globalparams: newState }, () => {\n\n                    const searchString = qs.stringify(newState);\n                    console.log(searchString);\n\n                    // console.log(this.state);\n\n                    if (this.history) {\n                        // debugger;\n                        this.history.push({\n                            pathname: `${process.env.PUBLIC_URL}/`,\n                            search: \"?\" + searchString\n                        });\n                    }\n                    // debugger;\n\n                    //console.log(searchString);\n                    // console.log(`Emit new state`,newState);\n                    if (this.onChange) {\n                        // debugger;\n                        this.onChange(newState);\n                    }\n                });\n                return newVal;\n            };\n            const currentVal = this.state.globalparams[paramName] || setVal(start / step);\n            return (\n                <article className=\"tile is-child box\">\n                    <p className=\"title\">{desc} </p>\n                    <p className=\"subtitle\">\n                        <input\n                            className=\"slider is-fullwidth is-large is-danger is-circle\"\n                            step=\"1\"\n                            min={min * amp}\n                            max={max * amp}\n                            value={currentVal * amp}\n                            type=\"range\"\n                            onChange={e => {\n                                setVal(e.target.value)\n                            }}\n                        /><br />\n                        {paramName} = {currentVal} {unit}\n                    </p>\n                </article>\n            )\n        }\n\n        return (\n            <div className=\"container\">\n                <section className=\"info-tiles\">\n                    <p>Belt transmission & rear wheel parameters</p>\n                    <div className=\"tile is-ancestor has-text-centered\">\n                        <div className=\"tile is-parent\">\n                            {slider(\"belt thickness\", \"h\", \"mm\", 0.1, 5, .1, 2.2)}\n                            {slider(\"belt length\", \"L\", \"m\", 1, 50, 0.1, 20)}\n\n                            {slider(\"Diameter hub motor\", \"D0\", \"mm\", 1, 100, 1, 10)}\n                            {slider(\"Diameter hub wheel\", \"D2\", \"mm\", 1, 200, 1, 60)}\n\n                            {slider(\"Diameter rear wheel\", \"RWD\", \"mm\", 10, 1000, 1, 180)}\n\n                        </div>\n                    </div>\n                    <p>Motor</p>\n                    <div className=\"tile is-ancestor has-text-centered\">\n                        <div className=\"tile is-parent\">\n                            {slider(\"average RPM\", \"rpm\", \"rpm\", 100, 8000, 100, 3500)}\n                            {slider(\"Track length\", \"Lt\", \"m\", 10, 30, 1, 18.48)}\n                        </div>\n                    </div>\n                    {/* <p>General</p>\n                    <div className=\"tile is-ancestor has-text-centered\">\n                        <div className=\"tile is-parent\">\n                            {slider(\"Track length\", \"tl\", \"m\", 10, 50, 1, 20)}\n                        </div>\n                    </div> */}\n                </section>\n                {/* </div>\n            </div>\n          </div>\n        </section> */}\n            </div >\n        );\n    }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport { defaults, Line } from \"react-chartjs-2\";\n// import convictionlib from \"./convictionlib.js\";\nimport makerjs from \"makerjs\";\nimport \"./sim.css\";\nimport qs from 'query-string';\n\nclass Me extends Component {\n\n    constructor(props) {\n        super();\n\n\n        this.history = props.history;\n\n        this.state = {\n            globalparams: props.globalparams,\n            proposal: props.proposal,\n            currenttime: 0,\n            // convictiontresholdpassed: false,\n            // stakeHistory: [],\n            timeline: undefined,\n            plot: undefined,\n        };\n\n        // debugger;\n\n    }\n\n    componentWillMount() {\n        this.recalc([]);\n        this.restart();\n    }\n\n    componentWillReceiveProps(newProps) {\n        console.log(\"New params\", newProps.globalparams);\n        const paramsToNumbers = Object.keys(newProps.globalparams).reduce((accum, key) => {\n            accum[key] = parseFloat(newProps.globalparams[key]);\n            return accum;\n        }, {})\n        this.setState({ globalparams: paramsToNumbers }, () => { this.recalc([]); });\n    }\n\n    makecolor(i) {\n        const r = (i * 7 * 139) % 255;\n        const g = (i * 7 * 251) % 255;\n        const b = (i * 7 * 43) % 255;\n        return `rgba(${r},${g},${b},0.3)`;\n    }\n\n    restart() {\n        this.setState({\n            //globalparams: props.globalparams,\n            //proposal: props.proposal,\n            currenttime: 0,\n            convictiontresholdpassed: false,\n            // stakeHistory: [],\n            // timeline: undefined,\n        }, () => {\n\n            let interval = setInterval(() => {\n                // let stakeHistory = [];\n                const newTime = this.state.currenttime + 1;\n                console.log(\"tick\", newTime);\n                if (this.state.globalparams.tl > this.state.currenttime && !this.state.convictiontresholdpassed) {\n                    this.setState({ currenttime: newTime }, () => {\n                        this.recalc([]);\n                        // console.log(this.state)\n                    });\n                    // t++;\n                } else {\n                    clearInterval(interval);\n                    if (this.state.convictiontresholdpassed) {\n                        this.recalc([{\n                            t: this.state.currenttime,\n                            desc: `Proposal passed !`\n                        }]);\n                    } else {\n                        this.recalc([[{\n                            t: this.state.currenttime,\n                            desc: `Proposal did not pass before end of sim`\n                        }]]);\n                    }\n                    // this.state.stakeHistory.push({\n                    //     t: this.state.currenttime,\n                    //     desc: `${user.name} changes stake to ${action.tokensstaked}`\n                    // });\n                }\n\n            }, 1);\n\n\n\n        });\n    }\n\n    recalc() {\n        console.log(\"Recalc\");\n\n\n        if (\n            !this.state.globalparams\n            || !this.state.globalparams.h\n            || !this.state.globalparams.L\n            || !this.state.globalparams.D0\n            || !this.state.globalparams.D2\n            || !this.state.globalparams.RWD\n\n        ) {\n            console.log(\"Not enough parameters to run sim\", this.state.globalparams);\n            return;\n        }\n\n        debugger;\n\n        const simstep = this.state.globalparams.L / 100;\n\n        let labels = [];\n        for (let t = 0; t <= this.state.globalparams.L; t += simstep) {\n            labels.push(Math.floor(t));\n        }\n\n        let spool1_beltlength = [];\n        let spool1_rotations = [];\n        let spool1_outer_diameter = [];\n        let spool2_beltlength = [];\n        let spool2_rotations = [];\n        let spool2_outer_diameter = [];\n\n        let distance_traveled = [];\n        let ratio = [];\n        let time_elapsed = [];\n\n        let pathArray = [];\n\n        const initial_L_spool2 = (this.state.globalparams.L) * 1000;\n        const initial_N_spool2 = (this.state.globalparams.h - this.state.globalparams.D2 + Math.sqrt((this.state.globalparams.D2 - this.state.globalparams.h) * (this.state.globalparams.D2 - this.state.globalparams.h) + (4 * this.state.globalparams.h * initial_L_spool2) / Math.PI)) / (2 * this.state.globalparams.h);\n        // const initial_diameter_spool2 = 2 * initial_N_spool2 * this.state.globalparams.h;\n\n        let winning_time = 0;\n        let winning_distance = 0;\n\n        for (let t = 0; t <= this.state.globalparams.L; t += simstep) {\n\n            const L_spool1 = t * 1000;\n            const N_spool1 = (this.state.globalparams.h - this.state.globalparams.D0 + Math.sqrt((this.state.globalparams.D0 - this.state.globalparams.h) * (this.state.globalparams.D0 - this.state.globalparams.h) + (4 * this.state.globalparams.h * L_spool1) / Math.PI)) / (2 * this.state.globalparams.h);\n\n            const L_spool2 = (this.state.globalparams.L - t) * 1000;\n            const N_spool2 = (this.state.globalparams.h - this.state.globalparams.D2 + Math.sqrt((this.state.globalparams.D2 - this.state.globalparams.h) * (this.state.globalparams.D2 - this.state.globalparams.h) + (4 * this.state.globalparams.h * L_spool2) / Math.PI)) / (2 * this.state.globalparams.h);\n\n            const distance_traveled_now = (initial_N_spool2 - N_spool2) * this.state.globalparams.RWD * Math.PI;\n\n            const time_elapsed_now = N_spool1 / this.state.globalparams.rpm * 60;\n\n\n            // debugger;\n            spool1_rotations.push(N_spool1);\n            spool2_rotations.push(N_spool2);\n\n            spool1_beltlength.push(t);\n            spool2_beltlength.push(this.state.globalparams.L - t);\n\n            const diameter_spool1 = 2 * N_spool1 * this.state.globalparams.h + this.state.globalparams.D0;\n            const diameter_spool2 = 2 * N_spool2 * this.state.globalparams.h + this.state.globalparams.D2;\n\n\n            if (t === 0) {\n\n                // spool front\n                pathArray.push(\n                    new makerjs.paths.Circle([0, 0], this.state.globalparams.D0)\n\n                );\n                //     {\n                //     type: 'circle',\n                //     origin: [0, 0],\n                //     radius: this.state.globalparams.D0\n                // });\n\n                pathArray.push({\n                    type: 'circle',\n                    origin: [0, 0],\n                    radius: diameter_spool2\n                });\n\n                const offsetX = 2 * diameter_spool2 + 20;\n                // spool rear\n                pathArray.push({\n                    type: 'circle',\n                    origin: [offsetX, 0],\n                    radius: diameter_spool2\n                });\n\n                pathArray.push({\n                    type: 'circle',\n                    origin: [offsetX, 0],\n                    radius: this.state.globalparams.D2\n                });\n\n\n\n\n            }\n\n\n\n            spool1_outer_diameter.push(diameter_spool1);\n            spool2_outer_diameter.push(diameter_spool2);\n\n            distance_traveled.push(distance_traveled_now / 1000);\n            ratio.push(diameter_spool2 === 0 ? undefined : diameter_spool1 / diameter_spool2);\n            time_elapsed.push(time_elapsed_now)\n\n            if (!winning_time && distance_traveled_now > this.state.globalparams.Lt * 1000) {\n\n                winning_time = time_elapsed_now;\n                winning_distance = distance_traveled_now / 1000;\n            }\n\n\n\n        }\n\n        let colorindex = 0;\n        this.setState({\n            winning_time: winning_time,\n            winning_distance: winning_distance,\n            plots: [\n                {\n                    labels: labels,\n                    datasets: [\n                        {\n                            label: \"gear ratio\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: ratio\n                        }]\n                },\n\n                {\n                    labels: labels,\n                    datasets: [\n                        {\n                            label: \"distance traveled (m)\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: distance_traveled\n                        }\n                    ]\n                },\n                {\n                    labels: labels,\n                    datasets: [\n                        //{\n                        //     label: \"belt length on spool 1\",\n                        //     fill: false,\n                        //     borderColor: this.makecolor(colorindex++),\n                        //     data: spool1_beltlength\n                        // }\n                        // ,\n                        {\n                            label: \"rotations on spool 1 (motor)\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: spool1_rotations\n                        }\n                        , {\n                            label: \"rotations on spool 2 (wheel)\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: spool2_rotations\n                        }\n\n\n                        // {\n                        //     label: \"time elapsed (s)\",\n                        //     fill: false,\n                        //     borderColor: this.makecolor(colorindex++),\n                        //     data: time_elapsed\n                        // },\n\n                        , {\n                            label: \"spool 1 outer diameter\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: spool1_outer_diameter\n                        }\n\n                        , {\n                            label: \"spool 2 outer diameter\",\n                            fill: false,\n                            borderColor: this.makecolor(colorindex++),\n                            data: spool2_outer_diameter\n                        }\n                        // , {\n                        //     label: \"belt length on spool 2\",\n                        //     fill: false,\n                        //     borderColor: this.makecolor(colorindex++),\n                        //     data: spool2_beltlength\n                        // }\n                    ]\n                }],\n            // timeline: timeline,\n            // stakeHistory: stakeHistory,\n        });\n\n\n        var svg = makerjs.exporter.toSVG(pathArray);\n        // debugger;\n        this.setState({ svg: svg });\n    }\n\n\n\n\n\n\n\n\n\n    render() {\n        // const timeline = this.state.timeline.map((item, i) => {\n        //     return (\n        //         <li key={i}>\n        //             at time {item.t} : {item.desc}\n        //         </li>\n        //     );\n        // });\n\n        return (\n            <div className=\"\">\n\n                <div className=\"tile is-ancestor has-text-centered\">\n                    <div className=\"tile is-parent\">\n\n                        {this.state.plots && this.state.plots.map((plot, i) => {\n                            return (<div className=\"tile is-child box\">\n                                <Line key={i} data={plot} />\n                            </div>)\n                        })}\n                    </div>\n                </div>\n\n                {this.state.winning_time ? (\n                    <>\n                        <p className=\"card-header-title\">Winning time : {this.state.winning_time}s</p>\n                        <p className=\"card-header-title\">Distance traveled : {this.state.winning_distance}s</p>\n                    </>\n                ) : (\n                        <p>You will never finish</p>\n\n                    )}\n\n\n                {this.state.svg && (\n                    <>\n                        <div dangerouslySetInnerHTML={{ __html: this.state.svg }} />\n                    </>\n                )}\n\n                <button onClick={() => { this.restart() }}>Restart Simulation</button>\n            </div>\n        )\n    }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      time: 50\n    };\n  }\n  changeTime(e) {\n    console.log(\"time changed \" +  e.target.value);\n    this.setState({ time: e.target.value });\n  }\n\n  render() {\n    return (\n      <section class=\"hero is-info welcome is-small\">\n        <div class=\"hero-body\">\n          <div class=\"container\">\n            <input\n              class=\"slider is-fullwidth is-large is-danger is-circle\"\n              step=\"1\"\n              min=\"0\"\n              max=\"100\"\n              value={this.state.time}\n              type=\"range\"\n              onChange={e => {\n                this.changeTime(e);\n              }}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\n// import './App.css';\nimport \"bulma/css/bulma.css\";\n// import { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport GlobalParams from \"./components/GlobalParams.js\";\nimport ConvictionVoting from \"./components/ConvictionVoting.js\";\nimport TimeLine from \"./components/TimeLine.js\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nconst rootPath = `${process.env.PUBLIC_URL}/`;\n\nclass App extends Component {\n    constructor(props) {\n        super();\n\n        this.state = {\n            globalparams: {\n                // alpha: 90,\n                // totaltime: 100,\n                // convictionthreshold: 50000,\n            },\n        };\n    }\n\n    timeChanged(e) {\n        console.log(\"app: time changed\");\n    }\n\n\n    render() {\n\n        return (\n\n            <div className=\"App\">\n                <BrowserRouter>\n                    <Switch>\n\n                        <Route\n                            key={rootPath}\n                            path={rootPath}\n                            exact={rootPath === \"/\"}\n                            render={props => (\n                                <>\n                                    <section className=\"hero is-info welcome\">\n                                        <div className=\"hero-body\">\n                                            <div className=\"container\">\n                                                <h1 className=\"header-1\">Powertool beltgear simulator</h1>\n                                            </div>\n                                        </div>\n\n                                    </section>\n                                    {/* <section className=\"info-tiles\"> */}\n                                    <GlobalParams\n                                        globalparams={this.state.globalparams}\n                                        onChange={data => {\n                                            // console.log(\"New data\", data);\n                                            this.setState({ globalparams: data });\n                                        }}\n                                        {...props}\n                                    />\n                                    {/* </section> */}\n                                    <ConvictionVoting\n                                        globalparams={this.state.globalparams} {...props}\n                                    />\n                                </>\n                            )}\n                        />\n\n                    </Switch>\n                </BrowserRouter>\n\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}